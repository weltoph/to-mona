Component Cell <init> {
  invalid   -> isInvalid           -> invalid
  dirty     -> isDirty             -> dirty
  exclusive -> isExclusive         -> exclusive
  shared    -> isShared            -> shared

  init      -> exclusifyInit       -> exclusive
  invalid   -> exclusifyInvalid    -> exclusive
  dirty     -> exclusifyDirty      -> exclusive
  shared    -> exclusifyShared     -> exclusive

  init      -> shareInit           -> shared
  invalid   -> shareInvalid        -> shared
  dirty     -> shareDirty          -> shared
  exclusive -> shareExclusive      -> shared

  init      -> invalidateInit      -> invalid
  dirty     -> invalidateDirty     -> invalid
  exclusive -> invalidateExclusive -> invalid
  shared    -> invalidateShared    -> invalid

  init      -> taintInit           -> dirty
  invalid   -> taintInvalid        -> dirty
  dirty     -> taintDirty          -> dirty
  exclusive -> taintExclusive      -> dirty
}

Formula {
  #############################################################################
  # initially all processes are in init and the first signal is actively      #
  # processed by 0 and passively processed by all others                      #
  #############################################################################
  # Symbol R init
  exclusifyInit(0) broadcasting { o: o ~= 0. invalidateInit(o) };

  # Symbol WI init
  taintInit(0) broadcasting { o: o ~= 0. invalidateInit(o) };

  #############################################################################
  # from here on onwards the automaton is modelled honestly                   #
  #############################################################################

  # Symbol R

  ## state invalid

  ### case #dirty = 0 ^ #shared = 0 ^ #exclusive = 0 <=> #invalid = n
  exclusifyInvalid(i) broadcasting { o: o ~= i. isInvalid(o) };

  ### case #dirty > 0: dirty process moves to shared
  i ~= j. shareInvalid(i) & shareDirty(j) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  ### case #shared > 0: shared process stays in shared
  i ~= j. shareInvalid(i) & isShared(j) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  ### case #exclusive > 0: exclusive process moves to shared
  i ~= j. shareInvalid(i) & shareExclusive(j) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  ## state exclusive
  isExclusive(i) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  ## state dirty
  isDirty(i) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  # Symbol WI

  ## state invalid
  taintInvalid(i) broadcasting { o: o ~= i. isInvalid(o)
                                          | invalidateExclusive(o)
                                          | invalidateDirty(o)
                                          | invalidateShared(o) };

  # Symbol W

  ## state dirty
  isDirty(i);

  ## state exclusive
  taintExclusive(i);

  ## state shared
  ### case #shared = 1
  exclusifyShared(i) broadcasting { o: o ~= i. isInvalid(o)
                                             | isExclusive(o)
                                             | isDirty(o) };
  ### case #shared > 1
  i ~= j. isShared(i) & isShared(j);
}

property "dirtydirty" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in dirty"
}

property "exclusiveexclusive" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in exclusive & j in exclusive"
}

property "dirtyshared" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in shared"
}

property "dirtyexclusive" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in exclusive"
}
