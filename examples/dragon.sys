# adapted from https://person.dibris.unige.it/delzanno-giorgio/CacheProtocol/firefly.hy

Component Cell <init> {
  invalid     -> isInvalid             -> invalid
  dirty       -> isDirty               -> dirty
  exclusive   -> isExclusive           -> exclusive
  shared      -> isShared              -> shared
  dirtyshared -> isDirtyshared         -> dirtyshared

  init        -> exclusifyInit         -> exclusive
  invalid     -> exclusifyInvalid      -> exclusive
  shared      -> exclusifyShared       -> exclusive
  dirty       -> exclusifyDirty        -> exclusive
  dirtyshared -> exclusifyDirtyshared  -> exclusive

  init        -> shareInit             -> shared
  invalid     -> shareInvalid          -> shared
  dirty       -> shareDirty            -> shared
  exclusive   -> shareExclusive        -> shared
  dirtyshared -> shareDirtyshare       -> shared

  init        -> dirtyshareInit        -> dirtyshared
  dirty       -> dirtyshareDirty       -> dirtyshared
  shared      -> dirtyshareShared      -> dirtyshared
  invalid     -> dirtyshareInvalid     -> dirtyshared
  exclusive   -> dirtyshareExclusive   -> dirtyshared

  init        -> invalidateInit        -> invalid
  shared      -> invalidateShared      -> invalid
  dirtyshared -> invalidateDirtyshared -> invalid
  dirty       -> invalidateDirty       -> invalid
  exclusive   -> invalidateExclusive   -> invalid

  init        -> taintInit             -> dirty
  exclusive   -> taintExclusive        -> dirty
  invalid     -> taintInvalid          -> dirty
  shared      -> taintShared           -> dirty
  dirtyshared -> taintDirtyshared      -> dirty

}

Formula {
  # Symbol R init
  exclusifyInit(0) broadcasting { o: o ~= 0. invalidateInit(o) };
  # Symbol W init
  taintInit(0) broadcasting { o: o ~= 0. invalidateInit(o) };

  # Symbol R

  ## state invalid

  ### case #exclusive = 0 ^ #dirty = 0 ^ #dirtyshared = 0 ^ #shared = 0
  exclusifyInvalid(i) broadcasting { o: o ~= i. isInvalid(o) };

  ### case #exclusive > 0
  i ~= j. shareInvalid(i) & shareExclusive(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  ### case #dirty > 0
  i ~= j. shareInvalid(i) & dirtyshareDirty(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  ### case #dirtyshare > 0
  i ~= j. shareInvalid(i) & isDirtyshared(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  ### case #shared > 0
  i ~= j. shareInvalid(i) & isShared(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  ## state exclusive
  isExclusive(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  ## state dirty
  isDirty(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  ## state shared
  isShared(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  ## state dirtyshare
  isDirtyshared(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | dirtyshareDirty(o)
    | isShared(o)
    | isDirtyshared(o) };

  # Symbol W

  ## state invalid

  ### case #exclusive = 0 ^ #dirty = 0 ^ #dirtyshared = 0 ^ #shared = 0
  taintInvalid(i) broadcasting { o: o ~= i. isInvalid(o) };

  ### case #exclusive > 0
  i ~= j. dirtyshareInvalid(i) & shareExclusive(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ### case #dirty > 0
  i ~= j. dirtyshareInvalid(i) & shareDirty(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ### case #dirtyshare > 0
  i ~= j. dirtyshareInvalid(i) & shareDirtyshare(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ### case #shared > 0
  i ~= j. dirtyshareInvalid(i) & isShared(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ## state exclusive
  taintExclusive(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ## state dirty
  isDirty(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ## state shared
  ### case #dirtyshared > 0
  i ~= j. dirtyshareShared(i) & shareDirtyshare(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ### case #shared > 0 (only other processes considered)
  i ~= j. dirtyshareShared(i) & isShared(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ### case #dirtyshared = 0 ^ #shared = 1
  taintShared(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o) };

  ## state dirtyshared
  ### case #shared > 0
  i ~= j. isDirtyshared(i) & isShared(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ### case #dirtyshared > 0 (only other processes considered)
  i ~= j. isDirtyshared(i) & shareDirtyshare(j) broadcasting { o: o ~= i & o ~= j.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o)
    | isShared(o)
    | shareDirtyshare(o) };

  ### case #shared = 0 ^ #dirtyshare = 1
  taintDirtyshared(i) broadcasting { o: o ~= i.
    isInvalid(o)
    | shareExclusive(o)
    | shareDirty(o) };

}

property "dirtydirty" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in dirty"
}

property "exclusiveexclusive" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in exclusive & j in exclusive"
}

property "dirtysharedexclusive" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirtyshared & j in exclusive"
}

#
property "exclusiveshared" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in exclusive & j in shared"
}

property "exclusivedirty" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in exclusive"
}

#
property "shareddirty" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in shared"
}

property "dirtyshareddirty" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in dirtyshared"
}
