Component State <init> {
  init -> ph -> PH
  init -> pt -> PT

  init -> fh -> FH
  init -> ft -> FT

  PH -> isPH -> PH
  PT -> isPT -> PT
  FH -> isFH -> FH
  FT -> isFT -> FT
}

Component Decision <undecided> {
  undecided -> agree          -> agreed
  undecided -> disagree       -> disagreed
}

Formula {
  # one of the cryptographers pay and flip coin heads
  ph(i) broadcasting { p: p ~= i. fh(p) | ft(p) };
  # one of the cryptographers pay and flip coin heads
  pt(i) broadcasting { p: p ~= i. fh(p) | ft(p) };
  # none of the cryptographers pay
  broadcasting { p: fh(p) | ft(p) };

  # freeloading agreeing cryptographer i
  agree(i) & isFH(i) & isFH(succ(i));
  agree(i) & isFH(i) & isPH(succ(i));
  agree(i) & isFT(i) & isFT(succ(i));
  agree(i) & isFT(i) & isPT(succ(i));

  # paying agreeing cryptographer i
  agree(i) & isPH(i) & isFT(succ(i));
  agree(i) & isPT(i) & isFH(succ(i));

  # freeloading disagreeing cryptographer i
  disagree(i) & isFH(i) & isFT(succ(i));
  disagree(i) & isFT(i) & isFH(succ(i));
  disagree(i) & isFH(i) & isPT(succ(i));
  disagree(i) & isFT(i) & isPH(succ(i));

  # paying disagreeing cryptographer i
  disagree(i) & isPH(i) & isFH(succ(i));
  disagree(i) & isPT(i) & isFT(succ(i));
}

property "CryptographerPaid" {
  "(/* one cryptographer paid: */ ex1 x: (0 <= x & x < n & (x in PH | x in PT)) & /* everyone has reached a decision: */ all1 y: ( ( 0 <= y & y < n ) => ( y in agreed | y in disagreed ))) & /* 'automaton' to test if there are even disagrees: */ ex2 EvenDisagrees: (n in EvenDisagrees & 0 in EvenDisagrees & (all1 x: (0 <= x & x < n) => ( (((x in EvenDisagrees & x in disagreed) | (x notin EvenDisagrees & x notin disagreed)) <=> ((x+1) notin EvenDisagrees)))))"
}
property "MasterPaid" {
  "/* everyone has reached a decision and no one paid: */( all1 y: ( ( 0 <= y & y < n ) => ( ( y in agreed | y in disagreed ) & (y notin PH & y notin PT)))) & /* 'automaton' to test if there are even disagrees: */ ex2 EvenDisagrees: (n notin EvenDisagrees & 0 in EvenDisagrees & (all1 x: (0 <= x & x < n) => ( (((x in EvenDisagrees & x in disagreed) | (x notin EvenDisagrees & x notin disagreed)) <=> ((x+1) notin EvenDisagrees)))))"
}
