Component Cell <invalid> {
  invalid      -> isInvalid              -> invalid
  unowned      -> isUnowned              -> unowned
  exclusive    -> isExclusive            -> exclusive
  nonexclusive -> isNonexclusive         -> nonexclusive

  invalid      -> shareInvalid           -> nonexclusive
  unowned      -> shareUnowned           -> nonexclusive
  exclusive    -> shareExclusive         -> nonexclusive

  invalid      -> yieldInvalid           -> unowned
  exclusive    -> yieldExclusive         -> unowned
  nonexclusive -> yieldNonexclusive      -> unowned

  unowned      -> invalidateUnowned      -> invalid
  exclusive    -> invalidateExclusive    -> invalid
  nonexclusive -> invalidateNonexclusive -> invalid

  nonexclusive -> exclusifyNonexclusive  -> exclusive
  unowned      -> exclusifyUnowned       -> exclusive
  invalid      -> exclusifyInvalid       -> exclusive
}

Formula {
  # Symbol R
  ## state invalid
  yieldInvalid(i) broadcasting { o: o ~= i. isInvalid(o)
                                          | isNonexclusive(o)
                                          | shareExclusive(o)
                                          | isUnowned(o) };
  ## state unowned
  isUnowned(i) broadcasting { o: o ~= i. isInvalid(o)
                                          | isNonexclusive(o)
                                          | shareExclusive(o)
                                          | isUnowned(o) };
  ## state exclusive
  isExclusive(i) broadcasting { o: o ~= i. isInvalid(o)
                                          | isNonexclusive(o)
                                          | shareExclusive(o)
                                          | isUnowned(o) };
  ## state nonexclusive
  isNonexclusive(i) broadcasting { o: o ~= i. isInvalid(o)
                                          | isNonexclusive(o)
                                          | shareExclusive(o)
                                          | isUnowned(o) };
  # Symbol WO
  ## state invalid
  exclusifyInvalid(i) broadcasting { o: o ~= i. isInvalid(o)
                                             | invalidateNonexclusive(o)
                                             | invalidateExclusive(o)
                                             | invalidateUnowned(o) };
  # Symbol WI
  ## state unowned
  exclusifyUnowned(i) broadcasting { o: o ~= i. isInvalid(o)
                                             | invalidateNonexclusive(o)
                                             | isExclusive(o)
                                             | invalidateUnowned(o) };
  ## state nonexclusive
  exclusifyNonexclusive(i) broadcasting { o: o ~= i. isInvalid(o)
                                             | invalidateNonexclusive(o)
                                             | isExclusive(o)
                                             | invalidateUnowned(o) };
  # Symbol W
  ## state exclusive
  isExclusive(i) broadcasting { o: o ~= i. isInvalid(o)
                                         | isNonexclusive(o)
                                         | isExclusive(o)
                                         | isInvalid(o) };
}

property "exclusiveexclusive" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in exclusive & j in exclusive"
}

property "exclusiveunowned" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in exclusive & j in unowned"
}

property "exclusivenonexclusive" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in exclusive & j in nonexclusive"
}
