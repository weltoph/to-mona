Component State <Q0> {
  Q0  -> isQ0  -> Q0
  Q1  -> isQ1  -> Q1
  Q2  -> isQ2  -> Q2
  Q3  -> isQ3  -> Q3
  Q4  -> isQ4  -> Q4
  Q5  -> isQ5  -> Q5
  Q6  -> isQ6  -> Q6
  Q7  -> isQ7  -> Q7
  Q8  -> isQ8  -> Q8
  Q9  -> isQ9  -> Q9

  Q0  -> Q0toQ1 -> Q1
  Q1  -> Q1toQ2 -> Q2
  Q2  -> Q2toQ3 -> Q3
  Q3  -> Q3toQ4 -> Q4
  Q4  -> Q4toQ5 -> Q5
  Q5  -> Q5toQ6 -> Q6
  Q6  -> Q6toQ7 -> Q7
  Q7  -> Q7toQ8 -> Q8
  Q8  -> Q8toQ9 -> Q9
  Q9  -> Q9toQ0 -> Q0

  # if branching
  Q3  -> Q3toQ6   -> Q6
}

Component Flag <F0> {
  F0 -> isF0 -> F0
  F1 -> isF1 -> F1
  F2 -> isF2 -> F2
  F3 -> isF3 -> F3
  F4 -> isF4 -> F4

  F1 -> F1toF0 -> F0
  F2 -> F2toF0 -> F0
  F3 -> F3toF0 -> F0
  F4 -> F4toF0 -> F0

  F0 -> F0toF1 -> F1
  F2 -> F2toF1 -> F1
  F3 -> F3toF1 -> F1
  F4 -> F4toF1 -> F1

  F0 -> F0toF2 -> F2
  F1 -> F1toF2 -> F2
  F3 -> F3toF2 -> F2
  F4 -> F4toF2 -> F2

  F0 -> F0toF3 -> F3
  F1 -> F1toF3 -> F3
  F2 -> F2toF3 -> F3
  F4 -> F4toF3 -> F3

  F0 -> F0toF4 -> F4
  F1 -> F1toF4 -> F4
  F2 -> F2toF4 -> F4
  F3 -> F3toF4 -> F4
}

Formula {
  # flag[i] = 1
  Q0toQ1(i) & F0toF1(i);
  Q0toQ1(i) & isF1(i);
  Q0toQ1(i) & F2toF1(i);
  Q0toQ1(i) & F3toF1(i);
  Q0toQ1(i) & F4toF1(i);

  # wait until for all j ~= i flag[j] in {0,1,2} holds
  Q1toQ2(i) broadcasting { o: o ~= i. isF0(o) | isF1(o) | isF2(o) };

  # flag[i] = 3
  Q2toQ3(i) & F0toF3(i);
  Q2toQ3(i) & F1toF3(i);
  Q2toQ3(i) & F2toF3(i);
  Q2toQ3(i) & isF3(i);
  Q2toQ3(i) & F4toF3(i);

  # if ex. j ~= i such that flag[j] = 1 holds goto Q4
  i ~= j. Q3toQ4(i) & isF1(j);
  # else goto Q6
  Q3toQ6(i) broadcasting { o: o ~= i. isF0(o) | isF2(o) | isF3(o) | isF4(o) };

  # flag[i] = 2
  Q4toQ5(i) & F0toF2(i);
  Q4toQ5(i) & F1toF2(i);
  Q4toQ5(i) & isF2(i);
  Q4toQ5(i) & F3toF2(i);
  Q4toQ5(i) & F4toF2(i);

  # wait until ex. j ~= i such that flag[j] = 4
  i ~= j. Q5toQ6(i) & isF4(j);

  # flag[i] = 4
  Q6toQ7(i) & F0toF4(i);
  Q6toQ7(i) & F1toF4(i);
  Q6toQ7(i) & F2toF4(i);
  Q6toQ7(i) & F3toF4(i);
  Q6toQ7(i) & isF4(i);

  # wait until for all j < i flag[j] in {0, 1} holds
  Q7toQ8(i) broadcasting { o: o < i. isF0(o) | isF1(o) };

  # wait until for all j > i flag[j] in {0, 1, 4} holds
  Q8toQ9(i) broadcasting { o: i < o. isF0(o) | isF1(o) | isF4(o) };

  # flag[i] = 0
  Q9toQ0(i) & isF0(i);
  Q9toQ0(i) & F1toF0(i);
  Q9toQ0(i) & F2toF0(i);
  Q9toQ0(i) & F3toF0(i);
  Q9toQ0(i) & F4toF0(i);
}

property "nomutex" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i in Q8 & j in Q9"
}
