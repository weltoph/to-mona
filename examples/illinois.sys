Component Cell <invalid> {
  invalid   -> shareInvalid        -> shared
  dirty     -> shareDirty          -> shared
  exclusive -> shareExclusive      -> shared

  dirty     -> invalidateDirty     -> invalid
  exclusive -> invalidateExclusive -> invalid
  shared    -> invalidateShared    -> invalid

  invalid   -> isInvalid           -> invalid
  shared    -> isShared            -> shared
  exclusive -> isExclusive         -> exclusive
  dirty     -> isDirty             -> dirty

  exclusive -> taintExclusive      -> dirty
  shared    -> taintShared         -> dirty
  invalid   -> taintInvalid        -> dirty

  invalid   -> exclusifyInvalid    -> exclusive
}

Formula {
  # Symbol R
  ## state invalid

  ## case #dirty = 0 ^ #shared = 0 ^ #exclusive = 0 <=> #invalid = n
  exclusifyInvalid(i) broadcasting { o: o ~= i. isInvalid(o) };

  ## case #dirty > 0: dirty process moves to shared
  i ~= j. shareInvalid(i) & shareDirty(j) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  ## case #shared > 0: shared process stays in shared
  i ~= j. shareInvalid(i) & isShared(j) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  ## case #exclusive > 0: exclusive process moves to shared
  i ~= j. shareInvalid(i) & shareExclusive(j) broadcasting {
    o: o ~= i & o ~= j. isInvalid(o)
                      | shareDirty(o)
                      | isShared(o)
                      | shareExclusive(o)
  };

  ## state exclusive:
  isExclusive(i) broadcasting {
    o: o ~= i. isInvalid(o)
             | shareDirty(o)
             | isShared(o)
             | shareExclusive(o)
  };

  ## state dirty:
  isDirty(i) broadcasting {
    o: o ~= i. isInvalid(o)
             | shareDirty(o)
             | isShared(o)
             | shareExclusive(o)
  };

  # Symbol W

  ## state dirty
  isDirty(i) broadcasting { o: o ~= i. invalidateDirty(o)
                                     | invalidateShared(o)
                                     | invalidateExclusive(o)
                                     | isInvalid(o) };

  ## state exclusive
  taintExclusive(i) broadcasting { o: o ~= i. invalidateDirty(o)
                                            | invalidateShared(o)
                                            | invalidateExclusive(o)
                                            | isInvalid(o) };

  ## state shared
  taintShared(i) broadcasting { o: o ~= i. invalidateDirty(o)
                                         | invalidateShared(o)
                                         | invalidateExclusive(o)
                                         | isInvalid(o) };
  ## state invalid
  taintInvalid(i) broadcasting { o: o ~= i. invalidateDirty(o)
                                          | invalidateShared(o)
                                          | invalidateExclusive(o)
                                          | isInvalid(o) };

  # Symbol Rep
  ## state dirty
  invalidateDirty(i) broadcasting { o: o ~= i. isInvalid(o)
                                             | isExclusive(o)
                                             | isShared(o)
                                             | isDirty(o) };

  ## state shared
  invalidateShared(i) broadcasting { o: o ~= i. isInvalid(o)
                                              | isExclusive(o)
                                              | isShared(o)
                                              | isDirty(o) };

  ## state exclusive
  invalidateExclusive(i) broadcasting { o: o ~= i. isInvalid(o)
                                                 | isExclusive(o)
                                                 | isShared(o)
                                                 | isDirty(o) };

}

property "dirtydirty" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in dirty"
}

property "dirtyshared" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in shared"
}
