Component Cell <invalid> {
  invalid   -> shareInvalid        -> shared
  dirty     -> shareDirty          -> shared
  exclusive -> shareExclusive      -> shared

  dirty     -> invalidateDirty     -> invalid
  exclusive -> invalidateExclusive -> invalid
  shared    -> invalidateShared    -> invalid

  invalid   -> isInvalid           -> invalid
  shared    -> isShared            -> shared
  exclusive -> isExclusive         -> exclusive
  dirty     -> isDirty             -> dirty

  exclusive -> taintExclusive      -> dirty
  shared    -> taintShared         -> dirty
  invalid   -> taintInvalid        -> dirty

  invalid   -> exclusifyInvalid    -> exclusive
}

Formula {
  # read miss
  exclusifyInvalid(i) broadcasting { o: o ~= i. isInvalid(o) };
  i ~= j. shareInvalid(i) & shareDirty(j);
  i ~= j. shareInvalid(i) & isShared(j) broadcasting {
    o: o ~= i & o ~= j. shareExclusive(o) | isInvalid(o)
                                          | isShared(o)
                                          | isDirty(o)
  };

  i ~= j. shareInvalid(i) & shareExclusive(j) broadcasting {
    o: o ~= i & o ~= j. shareExclusive(o) | isInvalid(o)
                                          | isShared(o)
                                          | isDirty(o)
  };

  # write hit
  taintExclusive(i);
  taintShared(i) broadcasting {
    o: o ~= i. invalidateShared(o) | isDirty(o)
                                   | isExclusive(o)
                                   | isInvalid(o)
  };

  # write miss
  taintInvalid(i) broadcasting {
    o: o ~= i. isInvalid(o)  | invalidateExclusive(o)
                             | invalidateShared(o)
                             | invalidateDirty(o)
  };

  # replacement
  invalidateDirty(i);
  invalidateShared(i);
  invalidateExclusive(i);
}

property "dirtydirty" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in dirty"
}

property "dirtyshared" {
  "ex1 i, j: 0 <= i & i < n & 0 <= j & j < n & i ~= j & i in dirty & j in shared"
}
