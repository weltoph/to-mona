Component philosopher <waiting> {
  waiting -> grabFirst  -> hungry
  hungry  -> grabSecond -> eating
  eating  -> dropBoth   -> waiting
}

Component fork <free> {
  free      -> grabbedLeft   -> busyLeft
  free      -> grabbedRight  -> busyRight
  busyLeft  -> releasedLeft  -> free
  busyRight -> releasedRight -> free
}

Formula {
  root < p . grabFirst(p)     & grabbedLeft(p);
  root < p . grabSecond(p)    & grabbedRight(succ0(p));
             grabFirst(root)  & grabbedRight(root.0);
             grabSecond(root) & grabbedLeft(root);
             releasedLeft(p)  & dropBoth(p) & releasedRight(succ0(p));
}

assumption "linear" {
  "all1 x: x in U => last1(x)"
}
