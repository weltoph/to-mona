Component philosopher <waiting> {
  waiting -> grabFirst  -> hungry
  hungry  -> grabSecond -> eating
  eating  -> dropBoth   -> waiting
}

Component fork <free> {
  free -> grabbed  -> busy
  busy -> released -> free
}

Formula {
  root < p . grabFirst(p)     & grabbed(p);
  root < p . grabSecond(p)    & grabbed(succ0(p));
             grabFirst(root)  & grabbed(root.0);
             grabSecond(root) & grabbed(root);
             released(p)      & dropBoth(p) & released(succ0(p));
}

assumption "linear" {
  "all1 x: x in U => last1(x)"
}
