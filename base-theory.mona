/* size of universe */
var1 n;

2 <= n;

/* define looping is_next notion */
pred is_next(var1 first_index, var1 succ_first_index) = (
    (first_index < n-1 => (succ_first_index = first_index+1))
  & (first_index = n-1 => (succ_first_index = 0))
);

/* check if an element is the last index */
pred is_last(var1 last) = (
  last + 1 = n
);

{% for name, assumption in interaction.assumptions.items() %}
/* custom assumption {{ name }} */
{{ assumption }};
{% endfor %}

/* define an intersection between two sets */
{{ interaction.intersection_predicate().render() }}

/* define a unique intersection between two sets */
{{ interaction.unique_intersection_predicate().render() }}

/* define an intersection with the initial marking */
{{ interaction.intersects_initial_predicate().render() }}

/* define a unique intersection with the initial marking */
{{ interaction.uniquely_intersects_initial_predicate().render() }}

/* define transition predicates: */
{% for clause in interaction.clauses %}
/* introduce predicate to describe deadlock of {{ clause }} */
{{ clause.is_dead_predicate(loop.index).render() }}

/* introduce predicate to describe trap condition of {{ clause }} */
{{ clause.trap_predicate(loop.index).render() }}

/* introduce predicate to describe flow invariant condition of {{ clause }} */
{{ clause.invariant_predicate(loop.index).render() }}
{% endfor %}

/* predicate to describe a deadlock */
{{ interaction.deadlock_predicate().render() }}

/* predicate to describe a trap */
{{ interaction.trap_predicate().render() }}

/* predicate to describe an initially marked trap */
{{ interaction.initially_marked_trap_predicate().render() }}

/* predicate to describe a flow invariant */
{{ interaction.invariant_predicate().render() }}

/* predicate to describe an initially uniquely marked flow invariant */
{{ interaction.initially_uniquely_marked_flow_predicate().render() }}

/* invariant that every initially marked trap has to be marked by any marking */
{{ interaction.trap_invariant_predicate().render() }}

/* invariant that every initially uniquely marked flow has to be marked by precisely one place by any marking */
{{ interaction.flow_invariant_predicate().render() }}

/* predicate to capture valid markings */
{{ interaction.marking_predicate().render() }}

{% for name, formula in interaction.properties.items() %}
/* custom property */
{{ interaction.custom_property(name, formula).render() }}
{% endfor %}
