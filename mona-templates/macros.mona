{% macro blockify(separator, statements, indentation_depth=0) -%}
{%- filter indent(indentation_depth, first=True) -%}
(
{%- for s in statements -%}
{%- if not loop.first -%}{{- '\n' }}) {{ separator }} ({%- endif -%}
{{ '\n' }}{{- caller(s)|indent(2, first=True) }}
{%- endfor -%}
{{ '\n' }})
{%- endfilter -%}
{%- endmacro %}


{% macro varlist() -%}
{% for var_prefix, vars in varargs if vars -%}
{%- if not loop.first and vars %}, {% endif -%}
{% for v in vars -%}
{% if not loop.first %}, {% endif %}{{ var_prefix }}{{ v }}
{%- endfor %}
{%- endfor %}
{%- endmacro %}

{% macro join(lst) -%}
{{ varlist(("", lst)) }}
{%- endmacro %}

{% macro pred_def_extended(name) -%}
{%- set varlist = varlist(*varargs) -%}
pred {{ name }}({{ varlist }}) = (
  {{ caller()|indent(2) }}
);
{%- endmacro %}

{% macro pred_def(name, second_order_vars, first_order_vars) -%}
{%- set varlist = varlist(("var2 ", second_order_vars), ("var1 ", first_order_vars|map("render_term_filter")|list)) -%}
pred {{ name }}({{ varlist }}) = (
  {{ caller()|indent(2) }}
);
{%- endmacro %}

{% macro pred_call(name, second_order_vars, first_order_vars) -%}
{%- set varlist = varlist(("", second_order_vars), ("", first_order_vars|map("render_term_filter")|list)) -%}
{{ name }}({{ varlist }})
{%- endmacro %}

{% macro render_comparison(comparison) -%}
{{ render_term(comparison.left) }} {{ comparison.comp_str }} {{ render_term(comparison.right) }}
{%- endmacro %}

{% macro render_guard(guard) -%}
{% call(c) blockify("&", guard.comparisons) -%}
  {{ render_comparison(c) }}
{%- endcall %}
{%- endmacro %}

{% macro render_term_conditions(terms) -%}
{% call(t) blockify("&", terms|rejectattr("trivial_term")) -%}
  is_next({{ render_term(t.argument) }}, {{ render_term(t) }})
{%- endcall %}
{%- endmacro %}


{% macro clause_term_conditions(clause) -%}
(
{% call(v) blockify("&", clause.variables, indentation_depth=2) -%}
0 <= {{ v }} & {{ v }} < n
{%- endcall %}
)
{%- if not clause.guard.is_trivial -%}
{{ '\n' }}& (
  {{ render_guard(clause.guard)|indent(2) }}
)
{%- endif -%}
{%- if clause.contains_not_trivial_existential_term -%}
{{ '\n' }}& (
{{ render_term_conditions(clause.existential_terms)|indent(2) }}
)
{%- endif -%}
{%- endmacro %}

{% macro broadcast_term_conditions(broadcast) -%}
(0 <= {{ render_term(broadcast.variable) }} & {{ render_term(broadcast.variable) }} < n)
{%- if broadcast.contains_not_trivial_local_term -%}
{{ '\n' -}}
& (
  {{ render_term_conditions(broadcast.local_terms)|indent(2) }}
)
{%- endif -%}
{%- if not broadcast.guard.is_trivial -%}
{{ '\n' -}}
& (
  {{ render_guard(broadcast.guard)|indent(2) }}
)
{%- endif %}
{%- endmacro %}


{% macro empty_broadcast_region(broadcast, region) -%}
all1 {{ join(broadcast.local_terms|map("render_term_filter")|list) }}: (
  (
    {{ broadcast_term_conditions(broadcast)|indent(4) }}
  ) => (
    {{ render_term(broadcast.port.argument) }} notin {{ broadcast.port[region] }}
  )
)
{%- endmacro %}


{% macro unique_broadcast_region(broadcast, region) -%}
ex1 {{ join(broadcast.local_terms|map("render_term_filter")) }}: (
  (
    {{ broadcast_term_conditions(broadcast)|indent(4) }}
  ) & (
    {{ render_term(broadcast.port.argument) }} in {{ broadcast.port[region] }}
  ) & (
    {%- set renaming = {broadcast.variable.name: 'h'} -%}
    {%- set renamed_broadcast = broadcast.rename(renaming) -%}
    all1 {{ join(renamed_broadcast.local_terms|map("render_term_filter")) }}: (
      (
        {{ broadcast_term_conditions(renamed_broadcast)|indent(8) }}
        & {{ render_term(renamed_broadcast.port.argument) }} in {{ renamed_broadcast.port[region] }}
      ) => (
        {{ render_term(broadcast.variable) }} = h
      )
    )
  )
)
{%- endmacro %}


{% macro unique_in_existentials(clause, region) -%}
(
{% call(p) blockify("|", clause.ports, indentation_depth=2) -%}
{{ render_term(p.argument) }} in {{ p[region] }}
{%- if clause.ports|length > 1 -%}
{{ '\n' -}}
& (
{% call(o) blockify("&", clause.ports|reject("sameas", p), indentation_depth=4) -%}
{{- render_term(o.argument) }} notin {{ o[region] -}}
{%- endcall %}
)
{%- endif -%}
{%- endcall %}
)
{%- endmacro %}


{% macro disjoint_in_existentials(clause, region) -%}
(
{% call(p) blockify("&", clause.ports, indentation_depth=2) -%}
{{ render_term(p.argument) }} notin {{ p[region] }}
{%- endcall %}
)
{%- endmacro %}

{% macro unique_in_broadcasts(clause, region) -%}
(
{% call(broadcast) blockify("|", clause.broadcasts, indentation_depth=2) -%}
{{ unique_broadcast_region(broadcast, region) }}
{%- if clause.broadcasts|length > 1 -%}
{{- '\n' -}}& (
{% call(other_broadcast) blockify("&", clause.broadcasts|reject("sameas", broadcast), indentation_depth=4) -%}
{{ empty_broadcast_region(other_broadcast, region) }}
{%- endcall %}
)
{% endif %}
{%- endcall %}
)
{%- endmacro %}


{% macro empty_in_broadcasts(clause, region) -%}
(
{% call(b) blockify("&", clause.broadcasts, indentation_depth=2) -%}
{{ empty_broadcast_region(b, region) }}
{%- endcall %}
)
{%- endmacro %}


{% macro dead_broadcast(broadcast) %}
ex1 {{ join(broadcast.local_terms|map("render_term_filter")|list) }}: (
  (
    {{ broadcast_term_conditions(broadcast) }}
  ) & (
    {{ render_term(broadcast.port.argument) }} notin {{ broadcast.port.origin }}
  )
)
{% endmacro %}
