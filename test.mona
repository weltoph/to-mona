/* size of universe */
var1 n;

2 <= n;

/* marking variables */

var2 executing;

var2 idle;


/*
marking properties:
  - mark one state for each component in any valid position
  - mark for each copy of a component precisely one element
*/
all1 m: (0 <= m & m < n) => (

  # considering component Task
  (
  (
    # case executing is marked
    m in executing
    # but others are not
     & m notin idle
    ) | (
    # case idle is marked
    m in idle
    # but others are not
     & m notin executing
    )
  )
);

/* define looping is_next notion */
pred is_next(var1 first_index, var1 succ_first_index) = (
    (first_index < n-1 => (succ_first_index = first_index+1))
  & (first_index = n-1 => (succ_first_index = 0))
);

/* check if an element is the last index */
pred is_last(var1 last) = (
  last = n
);

/* define an intersection between two sets */
pred intersection(var2 oneexecuting, var2 oneidle, var2 twoexecuting, var2 twoidle) = (
ex1 x: ( (( (0 <= x) & (x < n) )) & (( ( x in oneexecuting & x in twoexecuting ) | ( x in oneidle & x in twoidle ) )) )
);

/* define a unique intersection between two sets */
pred unique_intersection(var2 oneexecuting, var2 oneidle, var2 twoexecuting, var2 twoidle) = (
ex1 x: ( (( (0 <= x) & (x < n) )) & (( ( ( x in oneexecuting & x in twoexecuting & ~(( x in oneidle & x in twoidle )) ) | ( x in oneidle & x in twoidle & ~(( x in oneexecuting & x in twoexecuting )) ) ) & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( ( y in oneexecuting & y in twoexecuting ) | ( y in oneidle & y in twoidle ) )) => ((x = y)) )) ) )) )
);

/* define an intersection with the initial marking */
pred intersects_initial(var2 executing, var2 idle) = (
ex1 x: ( (( (0 <= x) & (x < n) )) & (( x in idle )) )
);

/* define a unique intersection with the initial marking */
pred uniquely_intersects_initial(var2 executing, var2 idle) = (
ex1 x: ( (( (0 <= x) & (x < n) )) & (( ( ( x in idle ) ) & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( y in idle )) => ((x = y)) )) ) )) )
);

/* define transition predicates: */

/* introduce predicate to describe deadlock of Clause((  ), startExecution(x0), [Broadcast(variable=Variable(name='x2'), guard=RestrictionDisjunction(restrictions=[RestrictionConjunction(restrictions=[Less(left=Variable(name='x2'), right=Variable(name='x0')), Unequal(left=Variable(name='x2'), right=Variable(name='x0'))])]), body=PredicateDisjunction(predicates={Predicate(name='isIdle', argument=Variable(name='x2'))})), Broadcast(variable=Variable(name='x3'), guard=RestrictionDisjunction(restrictions=[RestrictionConjunction(restrictions=[Greater(left=Variable(name='x3'), right=Variable(name='x0')), Unequal(left=Variable(name='x3'), right=Variable(name='x0'))])]), body=PredicateDisjunction(predicates={Predicate(name='isIdle', argument=Variable(name='x3'))}))]) */
pred dead_transition_1(var2 executing, var2 idle) = (
all1 x0: ( (( (0 <= x0) & (x0 < n) )) => (( (( ( true ) & ( true ) )) => (( ( x0 notin idle ) | ( ex1 x2: ( (( (0 <= x2) & (x2 < n) )) & (( ( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) ) & ( x2 notin idle ) )) ) | ex1 x3: ( (( (0 <= x3) & (x3 < n) )) & (( ( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) ) & ( x3 notin idle ) )) ) ) )) )) )
);

/* introduce predicate to describe trap condition of Clause((  ), startExecution(x0), [Broadcast(variable=Variable(name='x2'), guard=RestrictionDisjunction(restrictions=[RestrictionConjunction(restrictions=[Less(left=Variable(name='x2'), right=Variable(name='x0')), Unequal(left=Variable(name='x2'), right=Variable(name='x0'))])]), body=PredicateDisjunction(predicates={Predicate(name='isIdle', argument=Variable(name='x2'))})), Broadcast(variable=Variable(name='x3'), guard=RestrictionDisjunction(restrictions=[RestrictionConjunction(restrictions=[Greater(left=Variable(name='x3'), right=Variable(name='x0')), Unequal(left=Variable(name='x3'), right=Variable(name='x0'))])]), body=PredicateDisjunction(predicates={Predicate(name='isIdle', argument=Variable(name='x3'))}))]) */
pred trap_transition_1(var2 executing, var2 idle) = (
all1 x0: ( (( (0 <= x0) & (x0 < n) )) => (( (( ( true ) & ( true ) )) => (( ( (( x0 in idle )) => (( x0 in executing )) ) | ( ex1 x2: ( (( (0 <= x2) & (x2 < n) )) & (( ( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) ) & ( x2 in idle ) )) ) | ex1 x3: ( (( (0 <= x3) & (x3 < n) )) & (( ( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) ) & ( x3 in idle ) )) ) ) | ( all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( ( (x2 in idle) => (x2 in idle) ) )) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( ( (x3 in idle) => (x3 in idle) ) )) )) ) ) )) )) )
);

/* introduce predicate to describe flow invariant condition of Clause((  ), startExecution(x0), [Broadcast(variable=Variable(name='x2'), guard=RestrictionDisjunction(restrictions=[RestrictionConjunction(restrictions=[Less(left=Variable(name='x2'), right=Variable(name='x0')), Unequal(left=Variable(name='x2'), right=Variable(name='x0'))])]), body=PredicateDisjunction(predicates={Predicate(name='isIdle', argument=Variable(name='x2'))})), Broadcast(variable=Variable(name='x3'), guard=RestrictionDisjunction(restrictions=[RestrictionConjunction(restrictions=[Greater(left=Variable(name='x3'), right=Variable(name='x0')), Unequal(left=Variable(name='x3'), right=Variable(name='x0'))])]), body=PredicateDisjunction(predicates={Predicate(name='isIdle', argument=Variable(name='x3'))}))]) */
pred invariant_transition_1(var2 executing, var2 idle) = (
all1 x0: ( (( (0 <= x0) & (x0 < n) )) => (( (( ( true ) & ( true ) )) => (( ( ( ( x0 notin idle ) & ( all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) ) & ( ( x0 notin executing ) & ( all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) ) ) | ( ( ( ( ( x0 in idle ) ) & ( all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) ) | ( ( x0 notin idle ) & ( ( ex1 x2: ( (( (0 <= x2) & (x2 < n) )) & (( ( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) ) & x2 in idle & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( ( ( ( (y < x0) & (y ~= x0) ) ) & ( true ) ) & ( y in idle ) )) => ((y = x2)) )) ) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) | ( ex1 x3: ( (( (0 <= x3) & (x3 < n) )) & (( ( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) ) & x3 in idle & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( ( ( ( (y > x0) & (y ~= x0) ) ) & ( true ) ) & ( y in idle ) )) => ((y = x3)) )) ) )) ) & all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) ) ) ) ) & ( ( ( ( x0 in executing ) ) & ( all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) ) | ( ( x0 notin executing ) & ( ( ex1 x2: ( (( (0 <= x2) & (x2 < n) )) & (( ( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) ) & x2 in idle & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( ( ( ( (y < x0) & (y ~= x0) ) ) & ( true ) ) & ( y in idle ) )) => ((y = x2)) )) ) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) | ( ex1 x3: ( (( (0 <= x3) & (x3 < n) )) & (( ( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) ) & x3 in idle & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( ( ( ( (y > x0) & (y ~= x0) ) ) & ( true ) ) & ( y in idle ) )) => ((y = x3)) )) ) )) ) & all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) ) ) ) ) ) | ( ~(( ( x0 notin idle ) & ( all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) )) & ~(( ( ( ( x0 in idle ) ) & ( all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) ) | ( ( x0 notin idle ) & ( ( ex1 x2: ( (( (0 <= x2) & (x2 < n) )) & (( ( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) ) & x2 in idle & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( ( ( ( (y < x0) & (y ~= x0) ) ) & ( true ) ) & ( y in idle ) )) => ((y = x2)) )) ) )) ) & all1 x3: ( (( (0 <= x3) & (x3 < n) )) => (( (( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) )) => (( x3 notin idle )) )) ) ) | ( ex1 x3: ( (( (0 <= x3) & (x3 < n) )) & (( ( ( ( (x3 > x0) & (x3 ~= x0) ) ) & ( true ) ) & x3 in idle & all1 y: ( (( (0 <= y) & (y < n) )) => (( (( ( ( ( (y > x0) & (y ~= x0) ) ) & ( true ) ) & ( y in idle ) )) => ((y = x3)) )) ) )) ) & all1 x2: ( (( (0 <= x2) & (x2 < n) )) => (( (( ( ( (x2 < x0) & (x2 ~= x0) ) ) & ( true ) )) => (( x2 notin idle )) )) ) ) ) ) )) ) )) )) )
);

/* introduce predicate to describe deadlock of Clause((  ), stopExecution(x0), []) */
pred dead_transition_2(var2 executing, var2 idle) = (
all1 x0: ( (( (0 <= x0) & (x0 < n) )) => (( (( ( true ) & ( true ) )) => (( ( x0 notin executing ) | ( false ) )) )) )
);

/* introduce predicate to describe trap condition of Clause((  ), stopExecution(x0), []) */
pred trap_transition_2(var2 executing, var2 idle) = (
all1 x0: ( (( (0 <= x0) & (x0 < n) )) => (( (( ( true ) & ( true ) )) => (( (( x0 in executing )) => (( x0 in idle )) )) )) )
);

/* introduce predicate to describe flow invariant condition of Clause((  ), stopExecution(x0), []) */
pred invariant_transition_2(var2 executing, var2 idle) = (
all1 x0: ( (( (0 <= x0) & (x0 < n) )) => (( (( ( true ) & ( true ) )) => (( ( ( ( x0 notin executing ) & ( true ) ) & ( ( x0 notin idle ) & ( true ) ) ) | ( ( ( ( ( x0 in executing ) ) & ( true ) ) | ( ( x0 notin executing ) & ( false ) ) ) & ( ( ( ( x0 in idle ) ) & ( true ) ) | ( ( x0 notin idle ) & ( false ) ) ) ) | ( ~(( ( x0 notin executing ) & ( true ) )) & ~(( ( ( ( x0 in executing ) ) & ( true ) ) | ( ( x0 notin executing ) & ( false ) ) )) ) )) )) )
);


/* predicate to describe a deadlock */
pred deadlock(var2 executing, var2 idle) = (
( dead_transition_1(executing, idle) & dead_transition_2(executing, idle) )
);

/* predicate to describe a trap */
pred trap(var2 executing, var2 idle) = (
( trap_transition_1(executing, idle) & trap_transition_2(executing, idle) )
);

/* predicate to describe a flow invariant */
pred invariant(var2 executing, var2 idle) = (
( invariant_transition_1(executing, idle) & invariant_transition_2(executing, idle) )
);

/* invariant that every initially marked trap has to be marked by any marking */
all2 Texecuting, Tidle: ( ( (( trap(Texecuting, Tidle) & intersects_initial(Texecuting, Tidle) )) => (intersection(Texecuting, Tidle, executing, idle)) ) );

/* invariant that every initially uniquely marked flow has to be marked by precisely one place by any marking */
all2 Fexecuting, Fidle: ( ( (( invariant(Fexecuting, Fidle) & uniquely_intersects_initial(Fexecuting, Fidle) )) => (unique_intersection(Fexecuting, Fidle, executing, idle)) ) );

var2 Fexecuting, Fidle; invariant(Fexecuting, Fidle);
ex1 x: 0 <= x & x < n & (x in Fexecuting | x in Fidle);
